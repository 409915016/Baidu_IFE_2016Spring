@import "base.less";
//container 媒体查询时适应的宽度
@container-sm: 600px;
@container-md: 800px;
@container-lg: 800px;
//媒体查询宽度界限
@screen-sm-min: 768px;
@screen-md-min: 992px;
@screen-lg-min: 1200px;
//列距离 槽宽
@grid-gutter-width: 30px;
//列总数
@grid-columns: 12;

div.inside {
    border: 1px solid #999;
    height: 100%;
    background: #eee;
}

[class^="col-xs"] {
    height: 50px;
    margin: 0 0px 20px;
}

[class^="col-sm"] {
    height: 50px;
    margin: 0 0px 20px;
}

//
//
//以下内容参考自 bootstrap/less grid system
//
//开始构造 行容器
.row {
    .make-row();
    .clearfix();
}

.make-grid-columns();


.make-grid(xs);
@media (min-width: @screen-sm-min) {
  .make-grid(sm);
}

@media (min-width: @screen-md-min) {
  .make-grid(md);
}

@media (min-width: @screen-lg-min) {
  .make-grid(lg);
}
//栅格系统构造函数
//container 容器函数
.make-container(@gutter: @grid-gutter-width) {
    margin-left: auto;
    margin-right: auto;
    //与row 的 margin-left margin-right 抵消
    //实际上用于产生列之间的间隔
    padding-left: floor((@gutter / 2));
    padding-right: ceil((@gutter /2));
    @media (min-width: @screen-sm-min) {
        width: @container-sm;
    }
    @media (min-width: @screen-md-min) {
        width: @container-md;
    }
    @media (min-width: @screen-lg-min) {
        width: @container-lg;
    }
    .claerfix();
}

//row 行容器函数
.make-row (@gutter: @grid-gutter-width) {
    margin-left: ceil((@gutter / -2));
    margin-right: floor((@gutter / -2));
    .clearfix();
}


.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }
  .col(1); // kickstart it
}




//根据 xs sm md lg 创建浮动的column
//class : xs sm md lg 
.float-grid-columns(@class) {
  .col(@index) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}




.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}





// 循环创建后缀
.loop-grid-columns(@index, @class, @type) when (@index >=0) {
    //创建后缀
    .calc-grid-column(@index, @class, @type);
    //重复下一次
    .loop-grid-columns((@index - 1), @class, @type);
}



// 不同的屏幕创建列

.make-grid(@class) {
    .float-grid-columns(@class);
    .loop-grid-columns(@grid-columns, @class, width);
}

